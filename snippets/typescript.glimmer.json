{
  "class Component": {
    "prefix": ["class", "Component"],
    "body": [
      "import Component from '@glimmer/component';",
      "",
      "class ${1} extends Component<{",
      "  Element: null;",
      "  Args: {",
      "  };",
      "  Blocks: {",
      "    // default: []",
      "  }",
      "}> {",
      "  <template>",
      "    ${0}",
      "  </template>",
      "}"
    ]
  },
  "@tracked property": { "prefix": "@tracked", "body": "@tracked ${0};" },
  "const <template>": {
    "prefix": ["const", "temp", "<template>"],
    "body": [
      "import type { TOC } from '@ember/component/template-only';",
      "",
      "const ${0} = ",
      "  <template>",
      "    ${1}",
      "  </template> satisfies TOC<{",
      "    ${2}",
      "  }>"
    ]
  },
  "<template>": {
    "prefix": ["temp", "<template>"],
    "body": ["<template>", "  ${0}", "</template>"]
  },
  "@service injection": { "prefix": "@service", "body": "@service declare ${1}: ${0};" },
  "@service router": { 
    "prefix": ["@service", "router"], 
    "body": "@service declare router: RouterService;" 
  },
  "Signature type": {
    "prefix": ["interface", "Signature"],
    "body": [
      "interface Signature {",
      "  Element: null;",
      "  Args: {",
      "  };",
      "  Blocks: {",
      "    // default: []",
      "  };",
      "}"
    ]
  },
  "TOC type": {
    "prefix": "TOC",
    "body": [
      "TOC<{",
      "  Element: null;",
      "  Args: {",
      "  };",
      "  Blocks: {",
      "    // default: []",
      "  };",
      "}>"
    ]
  },
  "Test": {
    "prefix": ["test"],
    "body": [
      "test('${1}', async function (assert) {",
      "  ${2}",
      "});"
    ]
  },
  "Unit Test (file)": {
    "isFileTemplate": true,
    "prefix": ["Unit Test", "test"],
    "body": [
      "import { module, test } from 'qunit';",
      "import { setupTest } from 'ember-qunit';",
      "",
      "module('Unit | ${1}', function (hooks) {",
      "  setupTest(hooks);"
      "",
      "  test('${2}', async function (assert) {",
      "    assert.ok('true', 'we did it');",
      "  });",
      "});"
    ]
  },
  "Rendering Test (file)": {
    "isFileTemplate": true,
    "prefix": ["Rendering Test", "test"],
    "body": [
      "import { module, test } from 'qunit';",
      "import { setupRenderingTest } from 'ember-qunit';",
      "import { render } from '@ember/test-helpers';",
      "",
      "module('Rendering | ${1}', function (hooks) {",
      "  setupRenderingTest(hooks);"
      "",
      "  test('${2}', async function (assert) {",
      "    await render(",
      "      <template>",
      "        content to test here",
      "      </template>",
      "    );",
      "",
      "    assert.dom().hasText('content to test here');",
      "  });",
      "});"
    ],
  },
  "Application Test (file)": {
    "isFileTemplate": true,
    "prefix": ["Application Test", "test"],
    "body": [
      "import { module, test } from 'qunit';",
      "import { setupApplicationTest } from 'ember-qunit';",
      "import { visit } from '@ember/test-helpers';",
      "",
      "module('Application | ${1}', function (hooks) {",
      "  setupApplicationTest(hooks);"
      "",
      "  test('${2}', async function (assert) {",
      "    await visit('/some/location');",
      "",
      "    assert.dom().hasText('content to test here');",
      "  });",
      "});"
    ]
  }
}
